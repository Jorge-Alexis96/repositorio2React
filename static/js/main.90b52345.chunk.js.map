{"version":3,"sources":["componentes/Cargando.js","variables/variables.js","paginas/clientes/componentes/ClientesFila.js","paginas/clientes/componentes/ClientesTabla.js","paginas/clientes/componentes/ClientesForm.js","paginas/clientes/Clientes.js","paginas/pedidos/componentes/PedidosFila.js","paginas/pedidos/componentes/PedidosTabla.js","paginas/pedidos/componentes/PedidosForm.js","paginas/pedidos/Pedidos.js","paginas/repartidores/componentes/RepartidorFila.js","paginas/repartidores/componentes/RepartidoresTabla.js","paginas/repartidores/componentes/RepartidorFormV2.js","paginas/repartidores/Repartidores.js","paginas/productos/componentes/ProductoFila.js","paginas/productos/componentes/ProductosTabla.js","paginas/productos/componentes/ProductosForm.js","paginas/productos/Productos.js","paginas/home/Home.js","componentes/Header.js","App.js","serviceWorker.js","index.js"],"names":["Cargando","tipo","texto","claseAlerta","className","role","URL_BACKEND","ClientesFila","clientes","numero","setObjClientes","useState","checked","setChecked","useEffect","cli_est","id","cli_nom","cli_ape","onChange","nuevoCliente","endpoint","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","cli_dni","onClick","ClientesTabla","map","i","key","ClienteForm","getClientes","objCliente","setObjCliente","formVacio","formulario","setFormulario","handleChange","e","target","name","value","onSubmit","preventDefault","trim","Swal","fire","icon","title","text","showCancelButton","result","timer","putCliente","postCliente","htmlFor","type","Repartidores","cargando","setCargando","setClientes","PedidoFila","pedido","setObjPedido","ped_est","id_pro","id_cli","nuevoPedido","ped_fech","PedidosTabla","pedidos","PedidosFila","PedidoForm","getPedidos","objPedido","id_rep","putPedido","postPedido","Pedidos","setPedidos","PedidosForm","objPedidor","RepartidorFila","repartidor","setObjRepartidor","rep_est","rep_nom","rep_ape","nuevoRepartidor","rep_dni","RepartidoresTabla","repartidores","RepartidorFormV2","getRepartidores","objRepartidor","putRepartidor","postRepartidor","setRepartidores","ProductoFila","producto","setObjProducto","pro_est","pro_nom","pro_prec","nuevoProducto","pro_img","ProductoTabla","productos","ProductoForm","getProductos","objProducto","putProducto","postProducto","Productos","setProductos","ProductosForm","ProductosTabla","Home","Header","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","App","path","component","Clientes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90b52345.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Cargando = ({ tipo, texto }) => {\r\n\r\n let claseAlerta = \"\";\r\n switch (tipo) {\r\n  case \"success\":\r\n   claseAlerta = \"alert alert-success text-center\";\r\n   break;\r\n  case \"danger\":\r\n   claseAlerta = \"alert alert-danger text-center\";\r\n   break;\r\n  case \"warning\":\r\n   claseAlerta = \"alert alert-warning text-center\";\r\n   break;\r\n  case \"info\":\r\n   claseAlerta = \"alert alert-info text-center\";\r\n   break;\r\n  default:\r\n   claseAlerta = \"alert alert-light text-center\";\r\n   break;\r\n }\r\n\r\n\r\n return (\r\n  <div className={claseAlerta} role=\"alert\">\r\n   <h4 className=\"alert-heading\">Cargando</h4>\r\n   <p>{texto}</p>\r\n   <p className=\"mb-0\"></p>\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Cargando","export const URL_BACKEND = `https://5ed2789e717d5f00165181dc.mockapi.io`;","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch'\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\n\r\nconst ClientesFila = ({ clientes, numero, setObjClientes }) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n  const putCliente = () => {\r\n    let nuevoCliente = {...clientes};\r\n    nuevoCliente.cli_est = !checked + \"\";\r\n    \r\n    const endpoint = `${URL_BACKEND}/cliente/${clientes.id}`;\r\n    fetch(endpoint, {\r\n      method:'PUT',\r\n      headers: {\r\n        \"content-type\":\"application/json\"\r\n      },\r\n      body:JSON.stringify(nuevoCliente)\r\n    }).then((response) =>{\r\n      response.json().then((data)=> {\r\n        console.log(data);\r\n        //Aqui nos aseguramos que el repartidor, ha cambiado su\r\n        // estado\r\n        setChecked(!checked)\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (clientes.cli_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{clientes.id}</td>\r\n      <td>{clientes.cli_nom}</td>\r\n      <td>{clientes.cli_ape}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putCliente} />\r\n\r\n      </td>\r\n      <td>{clientes.cli_dni}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjClientes(clientes);\r\n        }}>\r\n          Editar\r\n     </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ClientesFila","import React from 'react'\r\nimport ClientesFila from './ClientesFila'\r\n\r\nconst ClientesTabla = ({ clientes,setObjClientes}) => {\r\n return (\r\n  <table className=\"table table-hover table-bordered table-striped\">\r\n   <thead>\r\n    <tr>\r\n     <th><strong>#</strong></th>\r\n     <th>Id</th>\r\n     <th>Nombre</th>\r\n     <th>Apellido</th>\r\n     <th>Estado</th>\r\n     <th>Dni</th>\r\n     <th>Acciones</th>\r\n    </tr>\r\n   </thead>\r\n   <tbody>\r\n    {\r\n     clientes.map((clientes, i) => {\r\n      return <ClientesFila numero={i}\r\n       clientes={clientes}\r\n       key={clientes.id} \r\n       setObjClientes={setObjClientes}/>\r\n     })\r\n    }\r\n   </tbody>\r\n  </table>\r\n )\r\n}\r\n\r\nexport default ClientesTabla","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ClienteForm = ({ getClientes, objCliente, setObjCliente }) => {\r\n\r\n  let formVacio = {\r\n    cli_nom: '',\r\n    cli_ape: '',\r\n    cli_est: '',\r\n    cli_dni: ''\r\n  };\r\n\r\n\r\n////////////////\r\n  \r\n  \r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objRepartidor\");\r\n    if (objCliente) {\r\n      setFormulario(objCliente);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objCliente])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({ ...formulario,\r\n       [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const postCliente = (nuevoCliente) => {\r\n    const endpoint = `${URL_BACKEND}/cliente`;\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoCliente),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Cliente ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        getClientes();\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un repartidor en la BD\r\n  const putCliente = (nuevoCliente) => {\r\n    const endpoint = `${URL_BACKEND}/cliente/${objCliente.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoCliente)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 5000\r\n        });\r\n        // limpiar el form\r\n        getClientes();\r\n        setObjCliente(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (formulario.cli_nom.trim() === \"\" ||\r\n      formulario.cli_ape.trim() === \"\" ||\r\n      formulario.cli_dni.trim() === \"\" ||\r\n      formulario.cli_est.trim() === \"\") {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Cuidado!\",\r\n        text: \"Todos los campos deben estar llenos\"\r\n      });\r\n    } else {\r\n      if (objCliente) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL Cliente\");\r\n            putCliente(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postCliente(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title text-center\">Registrar Cliente </h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Nombre:</label>\r\n            <input type=\"text\" name=\"cli_nom\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.cli_nom} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Apellido:</label>\r\n            <input type=\"text\" name=\"cli_ape\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.cli_ape} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Estado:</label>\r\n            <select className=\"form-control\" name=\"cli_est\"\r\n              onChange={handleChange}\r\n              value={formulario.cli_est}>\r\n              <option value=\"\">-Seleccione-</option>\r\n              <option value=\"true\">Habilitado</option>\r\n              <option value=\"false\">Inhabilitado</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Dni:</label>\r\n            <input type=\"text\" name=\"cli_dni\"\r\n              className=\"form-control\"\r\n              value={formulario.cli_dni}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objCliente ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar Cliente\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Cliente\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ClienteForm \r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport ClientesTabla from './componentes/ClientesTabla';\r\nimport ClienteForm from './componentes/ClientesForm';\r\nconst Repartidores = () => {\r\n\r\n  const endpoint = \"https://5ed2789e717d5f00165181dc.mockapi.io/cliente\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [clientes, setClientes] = useState([]);\r\n\r\n \r\n\r\n  const [objCliente, setObjCliente] = useState(null);\r\n\r\n  const getClientes = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);\r\n        setClientes(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getClientes();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          <ClienteForm\r\n            getClientes={getClientes}\r\n            objCliente={objCliente}\r\n            setObjCliente={setObjCliente}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando Clientes\" /> :\r\n              <ClientesTabla\r\n                clientes={clientes}\r\n                clientes={clientes}\r\n                setObjCliente={setObjCliente}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Repartidores","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch'\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\n\r\nconst PedidoFila = ({ pedido, numero, setObjPedido}) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n  const putPedido = () => {\r\n    let nuevoPedido = {...pedido};\r\n    nuevoPedido.ped_est = !checked + \"\";\r\n    const endpoint = `${URL_BACKEND}/pedido/${pedido.id}`;\r\n    fetch(endpoint, {\r\n      method:'PUT',\r\n      headers: {\r\n        \"content-type\":\"application/json\"\r\n      },\r\n      body:JSON.stringify(nuevoPedido)\r\n    }).then((response) =>{\r\n      response.json().then((data)=> {\r\n        console.log(data);\r\n        setChecked(!checked)\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (pedido.ped_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{pedido.id_pro}</td>\r\n      <td>{pedido.id_cli}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putPedido} />\r\n\r\n      </td>\r\n      <td>{pedido.ped_fech}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjPedido(pedido);\r\n        }}>\r\n          Editar\r\n     </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default PedidoFila","import React from 'react'\r\nimport PedidosFila from './PedidosFila'\r\n\r\nconst PedidosTabla = ({ pedidos,setObjPedido}) => {\r\n return (\r\n  <table className=\"table table-hover table-bordered table-striped\">\r\n   <thead>\r\n    <tr>\r\n     <th><strong>#</strong></th>\r\n     <th>Producto</th>\r\n     <th>Cliente</th>\r\n     <th>Estado</th>\r\n     <th>Fecha</th>\r\n     <th>Acciones</th>\r\n    </tr>\r\n   </thead>\r\n   <tbody>\r\n    {\r\n     pedidos.map((pedido, i) => {\r\n      return <PedidosFila numero={i}\r\n       pedido={pedido}\r\n       key={pedido.id} \r\n       setObjPedido={setObjPedido}/>\r\n     })\r\n    }\r\n   </tbody>\r\n  </table>\r\n )\r\n}\r\n\r\nexport default PedidosTabla","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst PedidoForm = ({ getPedidos, objPedido, setObjPedido }) => {\r\n\r\n  let formVacio = {\r\n    id_pro: '',\r\n    id_cli: '',\r\n    ped_est: '',\r\n    id_rep: ''\r\n  };\r\n\r\n\r\n////////////////\r\n  \r\n  \r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objPedido\");\r\n    if (objPedido) {\r\n      setFormulario(objPedido);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objPedido])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({ ...formulario,\r\n       [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const postPedido = (nuevoPedido) => {\r\n    const endpoint = `${URL_BACKEND}/pedido`;\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoPedido),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n          timer: 5000,\r\n        });\r\n        getPedidos();\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un repartidor en la BD\r\n  const putPedido = (nuevoPedido) => {\r\n    const endpoint = `${URL_BACKEND}/pedido/${objPedido.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoPedido)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 5000\r\n        });\r\n        // limpiar el form\r\n        getPedidos();\r\n        setObjPedido(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (formulario.id_pro.trim() === \"\" ||\r\n      formulario.id_cli.trim() === \"\" ||\r\n      formulario.id_rep.trim() === \"\" ||\r\n      formulario.ped_est.trim() === \"\") {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Cuidado!\",\r\n        text: \"Todos los campos deben estar llenos\"\r\n      });\r\n    } else {\r\n      if (objPedido) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n            putPedido(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postPedido(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title\">Registrar Pedido</h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Producto:</label>\r\n            <input type=\"text\" name=\"id_pro\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.id_pro} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Cliente:</label>\r\n            <input type=\"text\" name=\"id_cli\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.id_cli} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Estado:</label>\r\n            <select className=\"form-control\" name=\"ped_est\"\r\n              onChange={handleChange}\r\n              value={formulario.ped_est}>\r\n              <option value=\"\">-Seleccione-</option>\r\n              <option value=\"true\">Habilitado</option>\r\n              <option value=\"false\">Inhabilitado</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">AEA:</label>\r\n            <input type=\"text\" name=\"id_rep\"\r\n              className=\"form-control\"\r\n              value={formulario.id_rep}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objPedido ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar ProbjProducto\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Producto\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PedidoForm \r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport PedidosTabla from './componentes/PedidosTabla';\r\nimport PedidosForm from './componentes/PedidosForm';\r\nconst Pedidos = () => {\r\n\r\n  const endpoint = \"https://5ed2789e717d5f00165181dc.mockapi.io/pedido\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [pedidos, setPedidos] = useState([]);\r\n\r\n  //objRepartidor es una variable de estado, la cual va a contener\r\n  // un objeto de tipo repartidor si y solo si, queremos editar\r\n  // a un repartidor, en caso contrario su valor sera null\r\n\r\n  const [objPedido, setObjPedido] = useState(null);\r\n\r\n  const getPedidos = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);\r\n        setPedidos(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getPedidos();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n        \r\n          <PedidosForm\r\n            getPedidos={getPedidos}\r\n            objPedidor={objPedido}\r\n            setObjPedido={setObjPedido}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando Pedidos\" /> :\r\n              <PedidosTabla\r\n                pedidos={pedidos}\r\n                pedidos={pedidos}\r\n                setObjPedido={setObjPedido}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Pedidos","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch'\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\n\r\nconst RepartidorFila = ({ repartidor, numero, setObjRepartidor }) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n  const putRepartidor = () => {\r\n    let nuevoRepartidor = {...repartidor};\r\n    nuevoRepartidor.rep_est = !checked + \"\";\r\n    // al nuevo repartidor le colocamos el estado contrario\r\n    // al que tiene el componente actualmente,\r\n    // esto se da por que si no es true es false(dicotomico)\r\n    const endpoint = `${URL_BACKEND}/repartidor/${repartidor.id}`;\r\n    fetch(endpoint, {\r\n      method:'PUT',\r\n      headers: {\r\n        \"content-type\":\"application/json\"\r\n      },\r\n      body:JSON.stringify(nuevoRepartidor)\r\n    }).then((response) =>{\r\n      response.json().then((data)=> {\r\n        console.log(data);\r\n        //Aqui nos aseguramos que el repartidor, ha cambiado su\r\n        // estado\r\n        setChecked(!checked)\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (repartidor.rep_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{repartidor.id}</td>\r\n      <td>{repartidor.rep_nom}</td>\r\n      <td>{repartidor.rep_ape}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putRepartidor} />\r\n\r\n      </td>\r\n      <td>{repartidor.rep_dni}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjRepartidor(repartidor);\r\n        }}>\r\n          Editar\r\n     </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default RepartidorFila","import React from 'react'\r\nimport RepartidorFila from './RepartidorFila'\r\n\r\nconst RepartidoresTabla = ({ repartidores,setObjRepartidor}) => {\r\n return (\r\n  <table className=\"table table-hover table-bordered table-striped\">\r\n   <thead>\r\n    <tr>\r\n     <th><strong>#</strong></th>\r\n     <th>Id</th>\r\n     <th>Nombre</th>\r\n     <th>Apellido</th>\r\n     <th>Estado</th>\r\n     <th>Dni</th>\r\n     <th>Acciones</th>\r\n    </tr>\r\n   </thead>\r\n   <tbody>\r\n    {\r\n     repartidores.map((repartidor, i) => {\r\n      return <RepartidorFila numero={i}\r\n       repartidor={repartidor}\r\n       key={repartidor.id} \r\n       setObjRepartidor={setObjRepartidor}/>\r\n     })\r\n    }\r\n   </tbody>\r\n  </table>\r\n )\r\n}\r\n\r\nexport default RepartidoresTabla","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst RepartidorFormV2 = ({ getRepartidores, objRepartidor, setObjRepartidor }) => {\r\n\r\n  let formVacio = {\r\n    rep_nom: '',\r\n    rep_ape: '',\r\n    rep_est: '',\r\n    rep_dni: ''\r\n  };\r\n\r\n\r\n////////////////\r\n  \r\n  \r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objRepartidor\");\r\n    if (objRepartidor) {\r\n      setFormulario(objRepartidor);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objRepartidor])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({ ...formulario,\r\n       [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const postRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/repartidor`;\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoRepartidor),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        getRepartidores();\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un repartidor en la BD\r\n  const putRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/repartidor/${objRepartidor.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 1500\r\n        });\r\n        // limpiar el form\r\n        getRepartidores();\r\n        setObjRepartidor(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (formulario.rep_nom.trim() === \"\" ||\r\n      formulario.rep_ape.trim() === \"\" ||\r\n      formulario.rep_dni.trim() === \"\" ||\r\n      formulario.rep_est.trim() === \"\") {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Cuidado!\",\r\n        text: \"Todos los campos deben estar llenos\"\r\n      });\r\n    } else {\r\n      if (objRepartidor) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n            putRepartidor(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postRepartidor(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title\">Registrar Repartidor</h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Nombre:</label>\r\n            <input type=\"text\" name=\"rep_nom\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.rep_nom} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Apellido:</label>\r\n            <input type=\"text\" name=\"rep_ape\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.rep_ape} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Estado:</label>\r\n            <select className=\"form-control\" name=\"rep_est\"\r\n              onChange={handleChange}\r\n              value={formulario.rep_est}>\r\n              <option value=\"\">-Seleccione-</option>\r\n              <option value=\"true\">Habilitado</option>\r\n              <option value=\"false\">Inhabilitado</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Dni:</label>\r\n            <input type=\"text\" name=\"rep_dni\"\r\n              className=\"form-control\"\r\n              value={formulario.rep_dni}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objRepartidor ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar Repartidor\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Repartidor\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RepartidorFormV2\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport RepartidoresTabla from './componentes/RepartidoresTabla';\r\nimport RepartidorForm from './componentes/RepartidorForm';\r\nimport RepartidorFormV2 from './componentes/RepartidorFormV2';\r\nconst Repartidores = () => {\r\n\r\n  const endpoint = \"https://5ed2789e717d5f00165181dc.mockapi.io/repartidor\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [repartidores, setRepartidores] = useState([]);\r\n\r\n  //objRepartidor es una variable de estado, la cual va a contener\r\n  // un objeto de tipo repartidor si y solo si, queremos editar\r\n  // a un repartidor, en caso contrario su valor sera null\r\n\r\n  const [objRepartidor, setObjRepartidor] = useState(null);\r\n\r\n  const getRepartidores = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);\r\n        setRepartidores(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getRepartidores();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {/* <RepartidorForm\r\n            getRepartidores={getRepartidores}\r\n            objRepartidor={objRepartidor}\r\n            setObjRepartidor={setObjRepartidor}\r\n          /> */}\r\n          <RepartidorFormV2\r\n            getRepartidores={getRepartidores}\r\n            objRepartidor={objRepartidor}\r\n            setObjRepartidor={setObjRepartidor}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando repartidores\" /> :\r\n              <RepartidoresTabla\r\n                repartidores={repartidores}\r\n                repartidores={repartidores}\r\n                setObjRepartidor={setObjRepartidor}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Repartidores","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch'\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\n\r\nconst ProductoFila = ({ producto, numero, setObjProducto }) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n  const putProducto = () => {\r\n    let nuevoProducto = {...producto};\r\n    nuevoProducto.pro_est = !checked + \"\";\r\n    // al nuevo repartidor le colocamos el estado contrario\r\n    // al que tiene el componente actualmente,\r\n    // esto se da por que si no es true es false(dicotomico)\r\n    const endpoint = `${URL_BACKEND}/producto/${producto.id}`;\r\n    fetch(endpoint, {\r\n      method:'PUT',\r\n      headers: {\r\n        \"content-type\":\"application/json\"\r\n      },\r\n      body:JSON.stringify(nuevoProducto)\r\n    }).then((response) =>{\r\n      response.json().then((data)=> {\r\n        console.log(data);\r\n        //Aqui nos aseguramos que el repartidor, ha cambiado su\r\n        // estado\r\n        setChecked(!checked)\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (producto.pro_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{producto.pro_nom}</td>\r\n      <td>{producto.pro_prec}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putProducto} />\r\n\r\n      </td>\r\n      <td>{producto.pro_img}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjProducto(producto);\r\n        }}>\r\n          Editar\r\n     </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ProductoFila","import React from 'react'\r\nimport ProductoFila from './ProductoFila'\r\n\r\nconst ProductoTabla = ({ productos,setObjProducto}) => {\r\n return (\r\n  <table className=\"table table-hover table-bordered table-striped\">\r\n   <thead>\r\n    <tr>\r\n     <th><strong>#</strong></th>\r\n     <th>Nombre</th>\r\n     <th>Precio</th>\r\n     <th>Estado</th>\r\n     <th>IMG</th>\r\n     <th>Acciones</th>\r\n    </tr>\r\n   </thead>\r\n   <tbody>\r\n    {\r\n     productos.map((producto, i) => {\r\n      return <ProductoFila numero={i}\r\n       producto={producto}\r\n       key={producto.id} \r\n       setObjProducto={setObjProducto}/>\r\n     })\r\n    }\r\n   </tbody>\r\n  </table>\r\n )\r\n}\r\n\r\nexport default ProductoTabla","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ProductoForm = ({ getProductos, objProducto, setObjProducto }) => {\r\n\r\n  let formVacio = {\r\n    pro_nom: '',\r\n    pro_prec: '',\r\n    pro_est: '',\r\n    pro_img: ''\r\n  };\r\n\r\n\r\n////////////////\r\n  \r\n  \r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objProducto\");\r\n    if (objProducto) {\r\n      setFormulario(objProducto);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objProducto])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({ ...formulario,\r\n       [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const postProducto = (nuevoProducto) => {\r\n    const endpoint = `${URL_BACKEND}/producto`;\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoProducto),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n          timer: 5000,\r\n        });\r\n        getProductos();\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un repartidor en la BD\r\n  const putProducto = (nuevoProducto) => {\r\n    const endpoint = `${URL_BACKEND}/producto/${objProducto.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoProducto)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 5000\r\n        });\r\n        // limpiar el form\r\n        getProductos();\r\n        setObjProducto(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (formulario.pro_nom.trim() === \"\" ||\r\n      formulario.pro_prec.trim() === \"\" ||\r\n      formulario.pro_img.trim() === \"\" ||\r\n      formulario.pro_est.trim() === \"\") {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Cuidado!\",\r\n        text: \"Todos los campos deben estar llenos\"\r\n      });\r\n    } else {\r\n      if (objProducto) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n            putProducto(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postProducto(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title\">Registrar Producto</h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Nombre:</label>\r\n            <input type=\"text\" name=\"pro_nom\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.pro_nom} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Precio:</label>\r\n            <input type=\"number\" name=\"pro_prec\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.pro_prec} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Estado:</label>\r\n            <select className=\"form-control\" name=\"pro_est\"\r\n              onChange={handleChange}\r\n              value={formulario.pro_est}>\r\n              <option value=\"\">-Seleccione-</option>\r\n              <option value=\"true\">Habilitado</option>\r\n              <option value=\"false\">Inhabilitado</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">IMG:</label>\r\n            <input type=\"text\" name=\"pro_img\"\r\n              className=\"form-control\"\r\n              value={formulario.pro_img}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objProducto ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar ProbjProducto\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Producto\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductoForm \r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport ProductosTabla from './componentes/ProductosTabla';\r\nimport ProductosForm from './componentes/ProductosForm';\r\nconst Productos = () => {\r\n\r\n  const endpoint = \"https://5ed2789e717d5f00165181dc.mockapi.io/producto\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [productos, setProductos] = useState([]);\r\n\r\n  //objRepartidor es una variable de estado, la cual va a contener\r\n  // un objeto de tipo repartidor si y solo si, queremos editar\r\n  // a un repartidor, en caso contrario su valor sera null\r\n\r\n  const [objProducto, setObjProducto] = useState(null);\r\n\r\n  const getProductos = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);\r\n        setProductos(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getProductos();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          <ProductosForm\r\n            getProductos={getProductos}\r\n            objProducto={objProducto}\r\n            setObjProducto={setObjProducto}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando repartidores\" /> :\r\n              <ProductosTabla\r\n                productos={productos}\r\n                productos={productos}\r\n                setObjProducto={setObjProducto}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Productos\r\n","import React from 'react'\r\n\r\nconst Home = () => {\r\n return (\r\n  <div>\r\n   Home\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n return (\r\n  <header>\r\n   <nav className=\"navbar navbar-expand-sm navbar-light bg-dark\">\r\n    <a className=\"navbar-brand\" href=\"!#\">Pedidos</a>\r\n    <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\r\n     aria-expanded=\"false\" aria-label=\"Toggle navigation\"></button>\r\n    <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n     <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n      <li className=\"nav-item active\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Home <span className=\"sr-only\">(current)</span></a> */}\r\n       <Link to={\"/clientes\"} className=\"nav-link\">Clientes</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/productos\"} className=\"nav-link\">Productos</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/pedidos\"} className=\"nav-link\">Pedidos</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/repartidores\"} className=\"nav-link\">Repartidores</Link>\r\n      </li>\r\n     </ul>\r\n    </div>\r\n   </nav>\r\n  </header>\r\n )\r\n}\r\n\r\nexport default Header","import React from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch\n} from 'react-router-dom';\n\nimport Clientes from './paginas/clientes/Clientes';\nimport Pedidos from './paginas/pedidos/Pedidos';\nimport Repartidores from './paginas/repartidores/Repartidores';\nimport Productos from './paginas/productos/Productos';\nimport Home from './paginas/home/Home';\nimport Header from './componentes/Header';\n\nfunction App() {\n  return (\n    <Router>\n\n      <Header />\n\n      <main className=\"container-fluid pt-3\">\n        <Switch>\n          <Route path={\"/clientes\"} component={Clientes} />\n          <Route path={\"/pedidos\"} component={Pedidos} />\n          <Route path={\"/repartidores\"} component={Repartidores} />\n          <Route path={\"/productos\"} component={Productos} />\n          <Route path={\"/\"} component={Home} />\n        </Switch>\n      </main>\n\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}